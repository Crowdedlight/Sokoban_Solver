

solver

1. breath first
	add all diamond positions to openlist
	
	while(openlist)
		pop next pos from openlist
		what sides can robot go to
			Can robot push on that side?
		FOR pushable sides make new pos for diamond, add to openlist
			check if newstep is deadlocked, then ignore and move on
			check if move already have been attempted. (Hashtable) - skip if it have been attempted
			if manhattan distance to a goal is closer than current dist, push to 3rd pos of openlist
			if it is the same push_back openlist
			else push_back openlist
		check current step for won		
		save current step		
		add currentpos to closedlist
	assumed solution has been found. Go from goal pos though parents with the shortest distance from each goal

	(Optimization: think about if certain moves can be reordered and still be valid. so robot moves as little as possible)
		


DATA:
step = vec<diamonds>, robotpos, parent node, manhattan distance to goal 

TODO DONE:
AStar må ikke gå igennem DIAMOND noder
Astar skal lave nye objekt for hver Snapshot, da mappet er ændret.
Afstand gemmes i snapshot. (Astar Path.size()+1) ligges til snapshots robotLængde
Når der findes en løsning så gemmes løsning i SolutionList.
TODO:
    Derefter lukkes alle branches hvor samlede afstand overstiger løsnings afstand.
    Ved ny løsning tjekkes distancen, og der beholdes kun løsningen med mindste distance
Når openList.Empty()
    så findes løsningerne i SolutionVector
    vælg løsning med mindst distance. (Burde kun være en)
    Backtrack løsning til parent == nullptr
        Dan vector med kode til robot ud af det. Husk at inkludere når robotten skal kører fra A til B.
            Overvej at inkluderer total_path fra AStar i Step for at kunne udskrive hvilke noder robotten skal køre.
        Slut resultat skulle gerne være en lang vector med instrukser til robotten.
        (f.eks. "1" = ligeud, "2" = tilbage, "3" = venstre, "4" = højre)
            Robot skal sørge for at når den skal tilbage efter at have pushet en CAN så skal den tilbage til den registerer
            det tidligere kryds så den står på noden bag CAN.
